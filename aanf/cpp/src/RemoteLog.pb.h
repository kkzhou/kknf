// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_RemoteLog_2eproto__INCLUDED
#define PROTOBUF_RemoteLog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MessageFormat.pb.h"

namespace AANF_Message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RemoteLog_2eproto();
void protobuf_AssignDesc_RemoteLog_2eproto();
void protobuf_ShutdownFile_RemoteLog_2eproto();

class RemoteLogRequest;
class RemoteLogResponse;

enum RemoteLogResponse_ErrorCode {
  RemoteLogResponse_ErrorCode_OK = 0,
  RemoteLogResponse_ErrorCode_NO_SUCH_LOG_ID = 1
};
bool RemoteLogResponse_ErrorCode_IsValid(int value);
const RemoteLogResponse_ErrorCode RemoteLogResponse_ErrorCode_ErrorCode_MIN = RemoteLogResponse_ErrorCode_OK;
const RemoteLogResponse_ErrorCode RemoteLogResponse_ErrorCode_ErrorCode_MAX = RemoteLogResponse_ErrorCode_NO_SUCH_LOG_ID;

const ::google::protobuf::EnumDescriptor* RemoteLogResponse_ErrorCode_descriptor();
inline const ::std::string& RemoteLogResponse_ErrorCode_Name(RemoteLogResponse_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoteLogResponse_ErrorCode_descriptor(), value);
}
inline bool RemoteLogResponse_ErrorCode_Parse(
    const ::std::string& name, RemoteLogResponse_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoteLogResponse_ErrorCode>(
    RemoteLogResponse_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class RemoteLogRequest : public ::google::protobuf::Message {
 public:
  RemoteLogRequest();
  virtual ~RemoteLogRequest();
  
  RemoteLogRequest(const RemoteLogRequest& from);
  
  inline RemoteLogRequest& operator=(const RemoteLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteLogRequest& default_instance();
  void Swap(RemoteLogRequest* other);
  
  // implements Message ----------------------------------------------
  
  RemoteLogRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteLogRequest& from);
  void MergeFrom(const RemoteLogRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string log_data = 4;
  inline bool has_log_data() const;
  inline void clear_log_data();
  static const int kLogDataFieldNumber = 4;
  inline const ::std::string& log_data() const;
  inline void set_log_data(const ::std::string& value);
  inline void set_log_data(const char* value);
  inline void set_log_data(const char* value, size_t size);
  inline ::std::string* mutable_log_data();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* log_data_;
  static const ::std::string _default_log_data_;
  friend void  protobuf_AddDesc_RemoteLog_2eproto();
  friend void protobuf_AssignDesc_RemoteLog_2eproto();
  friend void protobuf_ShutdownFile_RemoteLog_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoteLogRequest* default_instance_;
};
// -------------------------------------------------------------------

class RemoteLogResponse : public ::google::protobuf::Message {
 public:
  RemoteLogResponse();
  virtual ~RemoteLogResponse();
  
  RemoteLogResponse(const RemoteLogResponse& from);
  
  inline RemoteLogResponse& operator=(const RemoteLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoteLogResponse& default_instance();
  void Swap(RemoteLogResponse* other);
  
  // implements Message ----------------------------------------------
  
  RemoteLogResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RemoteLogResponse& from);
  void MergeFrom(const RemoteLogResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef RemoteLogResponse_ErrorCode ErrorCode;
  static const ErrorCode OK = RemoteLogResponse_ErrorCode_OK;
  static const ErrorCode NO_SUCH_LOG_ID = RemoteLogResponse_ErrorCode_NO_SUCH_LOG_ID;
  static inline bool ErrorCode_IsValid(int value) {
    return RemoteLogResponse_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    RemoteLogResponse_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    RemoteLogResponse_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return RemoteLogResponse_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return RemoteLogResponse_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return RemoteLogResponse_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .AANF_Message.RemoteLogResponse.ErrorCode error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::AANF_Message::RemoteLogResponse_ErrorCode error() const;
  inline void set_error(::AANF_Message::RemoteLogResponse_ErrorCode value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_;
  friend void  protobuf_AddDesc_RemoteLog_2eproto();
  friend void protobuf_AssignDesc_RemoteLog_2eproto();
  friend void protobuf_ShutdownFile_RemoteLog_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RemoteLogResponse* default_instance_;
};
// ===================================================================


// ===================================================================

static const int kRemoteLogReqFieldNumber = 101;
extern ::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::AANF_Message::RemoteLogRequest >, 11, false >
  remote_log_req;
static const int kRemoteLogRspFieldNumber = 102;
extern ::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::AANF_Message::RemoteLogResponse >, 11, false >
  remote_log_rsp;

// ===================================================================

// RemoteLogRequest

// required string log_data = 4;
inline bool RemoteLogRequest::has_log_data() const {
  return _has_bit(0);
}
inline void RemoteLogRequest::clear_log_data() {
  if (log_data_ != &_default_log_data_) {
    log_data_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& RemoteLogRequest::log_data() const {
  return *log_data_;
}
inline void RemoteLogRequest::set_log_data(const ::std::string& value) {
  _set_bit(0);
  if (log_data_ == &_default_log_data_) {
    log_data_ = new ::std::string;
  }
  log_data_->assign(value);
}
inline void RemoteLogRequest::set_log_data(const char* value) {
  _set_bit(0);
  if (log_data_ == &_default_log_data_) {
    log_data_ = new ::std::string;
  }
  log_data_->assign(value);
}
inline void RemoteLogRequest::set_log_data(const char* value, size_t size) {
  _set_bit(0);
  if (log_data_ == &_default_log_data_) {
    log_data_ = new ::std::string;
  }
  log_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RemoteLogRequest::mutable_log_data() {
  _set_bit(0);
  if (log_data_ == &_default_log_data_) {
    log_data_ = new ::std::string;
  }
  return log_data_;
}

// -------------------------------------------------------------------

// RemoteLogResponse

// required .AANF_Message.RemoteLogResponse.ErrorCode error = 4;
inline bool RemoteLogResponse::has_error() const {
  return _has_bit(0);
}
inline void RemoteLogResponse::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::AANF_Message::RemoteLogResponse_ErrorCode RemoteLogResponse::error() const {
  return static_cast< ::AANF_Message::RemoteLogResponse_ErrorCode >(error_);
}
inline void RemoteLogResponse::set_error(::AANF_Message::RemoteLogResponse_ErrorCode value) {
  GOOGLE_DCHECK(::AANF_Message::RemoteLogResponse_ErrorCode_IsValid(value));
  _set_bit(0);
  error_ = value;
}


}  // namespace AANF_Message

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AANF_Message::RemoteLogResponse_ErrorCode>() {
  return ::AANF_Message::RemoteLogResponse_ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_RemoteLog_2eproto__INCLUDED
