// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtoForTest.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace ProtoForTest {

namespace {

const ::google::protobuf::Descriptor* UserProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchUserRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchUserRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchUserResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchUserResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SearchUserResponse_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetUserIDByKeywordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserIDByKeywordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserIDByKeywordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserIDByKeywordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetUserIDByKeywordResponse_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GetUserProfileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserProfileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserProfileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserProfileResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GetUserProfileResponse_ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtoForTest_2eproto() {
  protobuf_AddDesc_ProtoForTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtoForTest.proto");
  GOOGLE_CHECK(file != NULL);
  UserProfile_descriptor_ = file->message_type(0);
  static const int UserProfile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, user_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, gender_),
  };
  UserProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserProfile_descriptor_,
      UserProfile::default_instance_,
      UserProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserProfile));
  SearchUserRequest_descriptor_ = file->message_type(1);
  static const int SearchUserRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserRequest, query_string_),
  };
  SearchUserRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchUserRequest_descriptor_,
      SearchUserRequest::default_instance_,
      SearchUserRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchUserRequest));
  SearchUserResponse_descriptor_ = file->message_type(2);
  static const int SearchUserResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserResponse, user_profile_list_),
  };
  SearchUserResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchUserResponse_descriptor_,
      SearchUserResponse::default_instance_,
      SearchUserResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchUserResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchUserResponse));
  SearchUserResponse_ErrorCode_descriptor_ = SearchUserResponse_descriptor_->enum_type(0);
  GetUserIDByKeywordRequest_descriptor_ = file->message_type(3);
  static const int GetUserIDByKeywordRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordRequest, user_name_keyword_),
  };
  GetUserIDByKeywordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserIDByKeywordRequest_descriptor_,
      GetUserIDByKeywordRequest::default_instance_,
      GetUserIDByKeywordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserIDByKeywordRequest));
  GetUserIDByKeywordResponse_descriptor_ = file->message_type(4);
  static const int GetUserIDByKeywordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordResponse, user_id_list_),
  };
  GetUserIDByKeywordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserIDByKeywordResponse_descriptor_,
      GetUserIDByKeywordResponse::default_instance_,
      GetUserIDByKeywordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserIDByKeywordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserIDByKeywordResponse));
  GetUserIDByKeywordResponse_ErrorCode_descriptor_ = GetUserIDByKeywordResponse_descriptor_->enum_type(0);
  GetUserProfileRequest_descriptor_ = file->message_type(5);
  static const int GetUserProfileRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRequest, user_id_list_),
  };
  GetUserProfileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserProfileRequest_descriptor_,
      GetUserProfileRequest::default_instance_,
      GetUserProfileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserProfileRequest));
  GetUserProfileResponse_descriptor_ = file->message_type(6);
  static const int GetUserProfileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileResponse, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileResponse, user_profile_list_),
  };
  GetUserProfileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserProfileResponse_descriptor_,
      GetUserProfileResponse::default_instance_,
      GetUserProfileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserProfileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserProfileResponse));
  GetUserProfileResponse_ErrorCode_descriptor_ = GetUserProfileResponse_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtoForTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserProfile_descriptor_, &UserProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchUserRequest_descriptor_, &SearchUserRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchUserResponse_descriptor_, &SearchUserResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserIDByKeywordRequest_descriptor_, &GetUserIDByKeywordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserIDByKeywordResponse_descriptor_, &GetUserIDByKeywordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserProfileRequest_descriptor_, &GetUserProfileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserProfileResponse_descriptor_, &GetUserProfileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtoForTest_2eproto() {
  delete UserProfile::default_instance_;
  delete UserProfile_reflection_;
  delete SearchUserRequest::default_instance_;
  delete SearchUserRequest_reflection_;
  delete SearchUserResponse::default_instance_;
  delete SearchUserResponse_reflection_;
  delete GetUserIDByKeywordRequest::default_instance_;
  delete GetUserIDByKeywordRequest_reflection_;
  delete GetUserIDByKeywordResponse::default_instance_;
  delete GetUserIDByKeywordResponse_reflection_;
  delete GetUserProfileRequest::default_instance_;
  delete GetUserProfileRequest_reflection_;
  delete GetUserProfileResponse::default_instance_;
  delete GetUserProfileResponse_reflection_;
}

void protobuf_AddDesc_ProtoForTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Protocol::protobuf_AddDesc_PacketFormat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ProtoForTest.proto\022\014ProtoForTest\032\022Pack"
    "etFormat.proto\"T\n\013UserProfile\022\017\n\007user_id"
    "\030\001 \002(\003\022\021\n\tuser_name\030\002 \002(\t\022\021\n\tuser_desc\030\003"
    " \002(\t\022\016\n\006gender\030\004 \002(\005\")\n\021SearchUserReques"
    "t\022\024\n\014query_string\030\004 \002(\t\"\267\001\n\022SearchUserRe"
    "sponse\0229\n\005error\030\004 \002(\0162*.ProtoForTest.Sea"
    "rchUserResponse.ErrorCode\0224\n\021user_profil"
    "e_list\030\005 \003(\0132\031.ProtoForTest.UserProfile\""
    "0\n\tErrorCode\022\006\n\002OK\020\000\022\020\n\014NO_SUCH_USER\020\001\022\t"
    "\n\005ERROR\020\002\"6\n\031GetUserIDByKeywordRequest\022\031"
    "\n\021user_name_keyword\030\004 \003(\t\"\247\001\n\032GetUserIDB"
    "yKeywordResponse\022A\n\005error\030\004 \002(\01622.ProtoF"
    "orTest.GetUserIDByKeywordResponse.ErrorC"
    "ode\022\024\n\014user_id_list\030\005 \003(\003\"0\n\tErrorCode\022\006"
    "\n\002OK\020\000\022\020\n\014NO_SUCH_USER\020\001\022\t\n\005ERROR\020\002\"-\n\025G"
    "etUserProfileRequest\022\024\n\014user_id_list\030\004 \003"
    "(\003\"\277\001\n\026GetUserProfileResponse\022=\n\005error\030\004"
    " \002(\0162..ProtoForTest.GetUserProfileRespon"
    "se.ErrorCode\0224\n\021user_profile_list\030\005 \003(\0132"
    "\031.ProtoForTest.UserProfile\"0\n\tErrorCode\022"
    "\006\n\002OK\020\000\022\020\n\014NO_SUCH_USER\020\001\022\t\n\005ERROR\020\002:X\n\026"
    "client_search_user_req\022\026.Protocol.Packet"
    "Format\030\311\001 \001(\0132\037.ProtoForTest.SearchUserR"
    "equest:Y\n\026client_search_user_rsp\022\026.Proto"
    "col.PacketFormat\030\312\001 \001(\0132 .ProtoForTest.S"
    "earchUserResponse:g\n\035bb_get_user_id_by_k"
    "eyword_req\022\026.Protocol.PacketFormat\030\313\001 \001("
    "\0132\'.ProtoForTest.GetUserIDByKeywordReque"
    "st:h\n\035bb_get_user_id_by_keyword_rsp\022\026.Pr"
    "otocol.PacketFormat\030\314\001 \001(\0132(.ProtoForTes"
    "t.GetUserIDByKeywordResponse:]\n\027bb_get_u"
    "ser_profile_req\022\026.Protocol.PacketFormat\030"
    "\315\001 \001(\0132#.ProtoForTest.GetUserProfileRequ"
    "est:^\n\027bb_get_user_profile_rsp\022\026.Protoco"
    "l.PacketFormat\030\316\001 \001(\0132$.ProtoForTest.Get"
    "UserProfileResponse", 1419);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtoForTest.proto", &protobuf_RegisterTypes);
  UserProfile::default_instance_ = new UserProfile();
  SearchUserRequest::default_instance_ = new SearchUserRequest();
  SearchUserResponse::default_instance_ = new SearchUserResponse();
  GetUserIDByKeywordRequest::default_instance_ = new GetUserIDByKeywordRequest();
  GetUserIDByKeywordResponse::default_instance_ = new GetUserIDByKeywordResponse();
  GetUserProfileRequest::default_instance_ = new GetUserProfileRequest();
  GetUserProfileResponse::default_instance_ = new GetUserProfileResponse();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::PacketFormat::default_instance(),
    201, 11, false, false,
    &::ProtoForTest::SearchUserRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::PacketFormat::default_instance(),
    202, 11, false, false,
    &::ProtoForTest::SearchUserResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::PacketFormat::default_instance(),
    203, 11, false, false,
    &::ProtoForTest::GetUserIDByKeywordRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::PacketFormat::default_instance(),
    204, 11, false, false,
    &::ProtoForTest::GetUserIDByKeywordResponse::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::PacketFormat::default_instance(),
    205, 11, false, false,
    &::ProtoForTest::GetUserProfileRequest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Protocol::PacketFormat::default_instance(),
    206, 11, false, false,
    &::ProtoForTest::GetUserProfileResponse::default_instance());
  UserProfile::default_instance_->InitAsDefaultInstance();
  SearchUserRequest::default_instance_->InitAsDefaultInstance();
  SearchUserResponse::default_instance_->InitAsDefaultInstance();
  GetUserIDByKeywordRequest::default_instance_->InitAsDefaultInstance();
  GetUserIDByKeywordResponse::default_instance_->InitAsDefaultInstance();
  GetUserProfileRequest::default_instance_->InitAsDefaultInstance();
  GetUserProfileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtoForTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtoForTest_2eproto {
  StaticDescriptorInitializer_ProtoForTest_2eproto() {
    protobuf_AddDesc_ProtoForTest_2eproto();
  }
} static_descriptor_initializer_ProtoForTest_2eproto_;


// ===================================================================

const ::std::string UserProfile::_default_user_name_;
const ::std::string UserProfile::_default_user_desc_;
#ifndef _MSC_VER
const int UserProfile::kUserIdFieldNumber;
const int UserProfile::kUserNameFieldNumber;
const int UserProfile::kUserDescFieldNumber;
const int UserProfile::kGenderFieldNumber;
#endif  // !_MSC_VER

UserProfile::UserProfile() {
  SharedCtor();
}

void UserProfile::InitAsDefaultInstance() {
}

UserProfile::UserProfile(const UserProfile& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserProfile::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  user_desc_ = const_cast< ::std::string*>(&_default_user_desc_);
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserProfile::~UserProfile() {
  SharedDtor();
}

void UserProfile::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (user_desc_ != &_default_user_desc_) {
    delete user_desc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserProfile_descriptor_;
}

const UserProfile& UserProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

UserProfile* UserProfile::default_instance_ = NULL;

UserProfile* UserProfile::New() const {
  return new UserProfile;
}

void UserProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (user_desc_ != &_default_user_desc_) {
        user_desc_->clear();
      }
    }
    gender_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &user_id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_user_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user_name().data(), this->user_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_user_desc;
        break;
      }
      
      // required string user_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_desc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_user_desc()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user_desc().data(), this->user_desc().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required int32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gender_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserProfile::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 user_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // required string user_desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_desc().data(), this->user_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_desc(), output);
  }
  
  // required int32 gender = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // required string user_desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_desc().data(), this->user_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_desc(), target);
  }
  
  // required int32 gender = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserProfile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }
    
    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // required string user_desc = 3;
    if (has_user_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_desc());
    }
    
    // required int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserProfile::MergeFrom(const UserProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(1)) {
      set_user_name(from.user_name());
    }
    if (from._has_bit(2)) {
      set_user_desc(from.user_desc());
    }
    if (from._has_bit(3)) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfile::CopyFrom(const UserProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UserProfile::Swap(UserProfile* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(user_desc_, other->user_desc_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserProfile_descriptor_;
  metadata.reflection = UserProfile_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SearchUserRequest::_default_query_string_;
#ifndef _MSC_VER
const int SearchUserRequest::kQueryStringFieldNumber;
#endif  // !_MSC_VER

SearchUserRequest::SearchUserRequest() {
  SharedCtor();
}

void SearchUserRequest::InitAsDefaultInstance() {
}

SearchUserRequest::SearchUserRequest(const SearchUserRequest& from) {
  SharedCtor();
  MergeFrom(from);
}

void SearchUserRequest::SharedCtor() {
  _cached_size_ = 0;
  query_string_ = const_cast< ::std::string*>(&_default_query_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchUserRequest::~SearchUserRequest() {
  SharedDtor();
}

void SearchUserRequest::SharedDtor() {
  if (query_string_ != &_default_query_string_) {
    delete query_string_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SearchUserRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchUserRequest_descriptor_;
}

const SearchUserRequest& SearchUserRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

SearchUserRequest* SearchUserRequest::default_instance_ = NULL;

SearchUserRequest* SearchUserRequest::New() const {
  return new SearchUserRequest;
}

void SearchUserRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_string_ != &_default_query_string_) {
        query_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchUserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_query_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->query_string().data(), this->query_string().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchUserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SearchUserRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string query_string = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->query_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchUserRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query_string = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchUserRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query_string = 4;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SearchUserRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchUserRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchUserRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchUserRequest::MergeFrom(const SearchUserRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_query_string(from.query_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchUserRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchUserRequest::CopyFrom(const SearchUserRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchUserRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SearchUserRequest::Swap(SearchUserRequest* other) {
  if (other != this) {
    std::swap(query_string_, other->query_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchUserRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchUserRequest_descriptor_;
  metadata.reflection = SearchUserRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SearchUserResponse_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchUserResponse_ErrorCode_descriptor_;
}
bool SearchUserResponse_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SearchUserResponse_ErrorCode SearchUserResponse::OK;
const SearchUserResponse_ErrorCode SearchUserResponse::NO_SUCH_USER;
const SearchUserResponse_ErrorCode SearchUserResponse::ERROR;
const SearchUserResponse_ErrorCode SearchUserResponse::ErrorCode_MIN;
const SearchUserResponse_ErrorCode SearchUserResponse::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SearchUserResponse::kErrorFieldNumber;
const int SearchUserResponse::kUserProfileListFieldNumber;
#endif  // !_MSC_VER

SearchUserResponse::SearchUserResponse() {
  SharedCtor();
}

void SearchUserResponse::InitAsDefaultInstance() {
}

SearchUserResponse::SearchUserResponse(const SearchUserResponse& from) {
  SharedCtor();
  MergeFrom(from);
}

void SearchUserResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchUserResponse::~SearchUserResponse() {
  SharedDtor();
}

void SearchUserResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SearchUserResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchUserResponse_descriptor_;
}

const SearchUserResponse& SearchUserResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

SearchUserResponse* SearchUserResponse::default_instance_ = NULL;

SearchUserResponse* SearchUserResponse::New() const {
  return new SearchUserResponse;
}

void SearchUserResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  user_profile_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchUserResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoForTest.SearchUserResponse.ErrorCode error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::ProtoForTest::SearchUserResponse_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::ProtoForTest::SearchUserResponse_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(42)) goto parse_user_profile_list;
        break;
      }
      
      // repeated .ProtoForTest.UserProfile user_profile_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_profile_list:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_user_profile_list()));
        if (input->ExpectTag(42)) goto parse_user_profile_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchUserResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SearchUserResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .ProtoForTest.SearchUserResponse.ErrorCode error = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }
  
  // repeated .ProtoForTest.UserProfile user_profile_list = 5;
  for (int i = 0; i < this->user_profile_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->user_profile_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchUserResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoForTest.SearchUserResponse.ErrorCode error = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }
  
  // repeated .ProtoForTest.UserProfile user_profile_list = 5;
  for (int i = 0; i < this->user_profile_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_profile_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchUserResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoForTest.SearchUserResponse.ErrorCode error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  // repeated .ProtoForTest.UserProfile user_profile_list = 5;
  total_size += 1 * this->user_profile_list_size();
  for (int i = 0; i < this->user_profile_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_profile_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SearchUserResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchUserResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchUserResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchUserResponse::MergeFrom(const SearchUserResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_profile_list_.MergeFrom(from.user_profile_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchUserResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchUserResponse::CopyFrom(const SearchUserResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchUserResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < user_profile_list_size(); i++) {
    if (!this->user_profile_list(i).IsInitialized()) return false;
  }
  return true;
}

void SearchUserResponse::Swap(SearchUserResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    user_profile_list_.Swap(&other->user_profile_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchUserResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchUserResponse_descriptor_;
  metadata.reflection = SearchUserResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserIDByKeywordRequest::kUserNameKeywordFieldNumber;
#endif  // !_MSC_VER

GetUserIDByKeywordRequest::GetUserIDByKeywordRequest() {
  SharedCtor();
}

void GetUserIDByKeywordRequest::InitAsDefaultInstance() {
}

GetUserIDByKeywordRequest::GetUserIDByKeywordRequest(const GetUserIDByKeywordRequest& from) {
  SharedCtor();
  MergeFrom(from);
}

void GetUserIDByKeywordRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserIDByKeywordRequest::~GetUserIDByKeywordRequest() {
  SharedDtor();
}

void GetUserIDByKeywordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetUserIDByKeywordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserIDByKeywordRequest_descriptor_;
}

const GetUserIDByKeywordRequest& GetUserIDByKeywordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

GetUserIDByKeywordRequest* GetUserIDByKeywordRequest::default_instance_ = NULL;

GetUserIDByKeywordRequest* GetUserIDByKeywordRequest::New() const {
  return new GetUserIDByKeywordRequest;
}

void GetUserIDByKeywordRequest::Clear() {
  user_name_keyword_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserIDByKeywordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_name_keyword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_name_keyword:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_user_name_keyword()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user_name_keyword(0).data(), this->user_name_keyword(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_user_name_keyword;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserIDByKeywordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetUserIDByKeywordRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string user_name_keyword = 4;
  for (int i = 0; i < this->user_name_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_name_keyword(i).data(), this->user_name_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name_keyword(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserIDByKeywordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string user_name_keyword = 4;
  for (int i = 0; i < this->user_name_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name_keyword(i).data(), this->user_name_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->user_name_keyword(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserIDByKeywordRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated string user_name_keyword = 4;
  total_size += 1 * this->user_name_keyword_size();
  for (int i = 0; i < this->user_name_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name_keyword(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetUserIDByKeywordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserIDByKeywordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserIDByKeywordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserIDByKeywordRequest::MergeFrom(const GetUserIDByKeywordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_name_keyword_.MergeFrom(from.user_name_keyword_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserIDByKeywordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIDByKeywordRequest::CopyFrom(const GetUserIDByKeywordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIDByKeywordRequest::IsInitialized() const {
  
  return true;
}

void GetUserIDByKeywordRequest::Swap(GetUserIDByKeywordRequest* other) {
  if (other != this) {
    user_name_keyword_.Swap(&other->user_name_keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserIDByKeywordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserIDByKeywordRequest_descriptor_;
  metadata.reflection = GetUserIDByKeywordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetUserIDByKeywordResponse_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserIDByKeywordResponse_ErrorCode_descriptor_;
}
bool GetUserIDByKeywordResponse_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetUserIDByKeywordResponse_ErrorCode GetUserIDByKeywordResponse::OK;
const GetUserIDByKeywordResponse_ErrorCode GetUserIDByKeywordResponse::NO_SUCH_USER;
const GetUserIDByKeywordResponse_ErrorCode GetUserIDByKeywordResponse::ERROR;
const GetUserIDByKeywordResponse_ErrorCode GetUserIDByKeywordResponse::ErrorCode_MIN;
const GetUserIDByKeywordResponse_ErrorCode GetUserIDByKeywordResponse::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetUserIDByKeywordResponse::kErrorFieldNumber;
const int GetUserIDByKeywordResponse::kUserIdListFieldNumber;
#endif  // !_MSC_VER

GetUserIDByKeywordResponse::GetUserIDByKeywordResponse() {
  SharedCtor();
}

void GetUserIDByKeywordResponse::InitAsDefaultInstance() {
}

GetUserIDByKeywordResponse::GetUserIDByKeywordResponse(const GetUserIDByKeywordResponse& from) {
  SharedCtor();
  MergeFrom(from);
}

void GetUserIDByKeywordResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserIDByKeywordResponse::~GetUserIDByKeywordResponse() {
  SharedDtor();
}

void GetUserIDByKeywordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetUserIDByKeywordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserIDByKeywordResponse_descriptor_;
}

const GetUserIDByKeywordResponse& GetUserIDByKeywordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

GetUserIDByKeywordResponse* GetUserIDByKeywordResponse::default_instance_ = NULL;

GetUserIDByKeywordResponse* GetUserIDByKeywordResponse::New() const {
  return new GetUserIDByKeywordResponse;
}

void GetUserIDByKeywordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserIDByKeywordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoForTest.GetUserIDByKeywordResponse.ErrorCode error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::ProtoForTest::GetUserIDByKeywordResponse_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::ProtoForTest::GetUserIDByKeywordResponse_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_user_id_list;
        break;
      }
      
      // repeated int64 user_id_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id_list:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_user_id_list(value);
        if (input->ExpectTag(40)) goto parse_user_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserIDByKeywordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetUserIDByKeywordResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .ProtoForTest.GetUserIDByKeywordResponse.ErrorCode error = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }
  
  // repeated int64 user_id_list = 5;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->user_id_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserIDByKeywordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoForTest.GetUserIDByKeywordResponse.ErrorCode error = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }
  
  // repeated int64 user_id_list = 5;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->user_id_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserIDByKeywordResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoForTest.GetUserIDByKeywordResponse.ErrorCode error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  // repeated int64 user_id_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetUserIDByKeywordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserIDByKeywordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserIDByKeywordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserIDByKeywordResponse::MergeFrom(const GetUserIDByKeywordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserIDByKeywordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserIDByKeywordResponse::CopyFrom(const GetUserIDByKeywordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserIDByKeywordResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetUserIDByKeywordResponse::Swap(GetUserIDByKeywordResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserIDByKeywordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserIDByKeywordResponse_descriptor_;
  metadata.reflection = GetUserIDByKeywordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserProfileRequest::kUserIdListFieldNumber;
#endif  // !_MSC_VER

GetUserProfileRequest::GetUserProfileRequest() {
  SharedCtor();
}

void GetUserProfileRequest::InitAsDefaultInstance() {
}

GetUserProfileRequest::GetUserProfileRequest(const GetUserProfileRequest& from) {
  SharedCtor();
  MergeFrom(from);
}

void GetUserProfileRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserProfileRequest::~GetUserProfileRequest() {
  SharedDtor();
}

void GetUserProfileRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetUserProfileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserProfileRequest_descriptor_;
}

const GetUserProfileRequest& GetUserProfileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

GetUserProfileRequest* GetUserProfileRequest::default_instance_ = NULL;

GetUserProfileRequest* GetUserProfileRequest::New() const {
  return new GetUserProfileRequest;
}

void GetUserProfileRequest::Clear() {
  user_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserProfileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_id_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id_list:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_user_id_list(value);
        if (input->ExpectTag(32)) goto parse_user_id_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserProfileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetUserProfileRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int64 user_id_list = 4;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->user_id_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserProfileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 user_id_list = 4;
  for (int i = 0; i < this->user_id_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->user_id_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserProfileRequest::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 user_id_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id_list(i));
    }
    total_size += 1 * this->user_id_list_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetUserProfileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserProfileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserProfileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserProfileRequest::MergeFrom(const GetUserProfileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_list_.MergeFrom(from.user_id_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserProfileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserProfileRequest::CopyFrom(const GetUserProfileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileRequest::IsInitialized() const {
  
  return true;
}

void GetUserProfileRequest::Swap(GetUserProfileRequest* other) {
  if (other != this) {
    user_id_list_.Swap(&other->user_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserProfileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserProfileRequest_descriptor_;
  metadata.reflection = GetUserProfileRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GetUserProfileResponse_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserProfileResponse_ErrorCode_descriptor_;
}
bool GetUserProfileResponse_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GetUserProfileResponse_ErrorCode GetUserProfileResponse::OK;
const GetUserProfileResponse_ErrorCode GetUserProfileResponse::NO_SUCH_USER;
const GetUserProfileResponse_ErrorCode GetUserProfileResponse::ERROR;
const GetUserProfileResponse_ErrorCode GetUserProfileResponse::ErrorCode_MIN;
const GetUserProfileResponse_ErrorCode GetUserProfileResponse::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GetUserProfileResponse::kErrorFieldNumber;
const int GetUserProfileResponse::kUserProfileListFieldNumber;
#endif  // !_MSC_VER

GetUserProfileResponse::GetUserProfileResponse() {
  SharedCtor();
}

void GetUserProfileResponse::InitAsDefaultInstance() {
}

GetUserProfileResponse::GetUserProfileResponse(const GetUserProfileResponse& from) {
  SharedCtor();
  MergeFrom(from);
}

void GetUserProfileResponse::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserProfileResponse::~GetUserProfileResponse() {
  SharedDtor();
}

void GetUserProfileResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* GetUserProfileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserProfileResponse_descriptor_;
}

const GetUserProfileResponse& GetUserProfileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtoForTest_2eproto();  return *default_instance_;
}

GetUserProfileResponse* GetUserProfileResponse::default_instance_ = NULL;

GetUserProfileResponse* GetUserProfileResponse::New() const {
  return new GetUserProfileResponse;
}

void GetUserProfileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  user_profile_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserProfileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .ProtoForTest.GetUserProfileResponse.ErrorCode error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::ProtoForTest::GetUserProfileResponse_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::ProtoForTest::GetUserProfileResponse_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(42)) goto parse_user_profile_list;
        break;
      }
      
      // repeated .ProtoForTest.UserProfile user_profile_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_profile_list:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_user_profile_list()));
        if (input->ExpectTag(42)) goto parse_user_profile_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserProfileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    GetUserProfileResponse::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .ProtoForTest.GetUserProfileResponse.ErrorCode error = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }
  
  // repeated .ProtoForTest.UserProfile user_profile_list = 5;
  for (int i = 0; i < this->user_profile_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->user_profile_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserProfileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .ProtoForTest.GetUserProfileResponse.ErrorCode error = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }
  
  // repeated .ProtoForTest.UserProfile user_profile_list = 5;
  for (int i = 0; i < this->user_profile_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_profile_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserProfileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .ProtoForTest.GetUserProfileResponse.ErrorCode error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  // repeated .ProtoForTest.UserProfile user_profile_list = 5;
  total_size += 1 * this->user_profile_list_size();
  for (int i = 0; i < this->user_profile_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_profile_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void GetUserProfileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserProfileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserProfileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserProfileResponse::MergeFrom(const GetUserProfileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_profile_list_.MergeFrom(from.user_profile_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserProfileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserProfileResponse::CopyFrom(const GetUserProfileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserProfileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < user_profile_list_size(); i++) {
    if (!this->user_profile_list(i).IsInitialized()) return false;
  }
  return true;
}

void GetUserProfileResponse::Swap(GetUserProfileResponse* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    user_profile_list_.Swap(&other->user_profile_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserProfileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserProfileResponse_descriptor_;
  metadata.reflection = GetUserProfileResponse_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::SearchUserRequest >, 11, false >
  client_search_user_req(kClientSearchUserReqFieldNumber, ::ProtoForTest::SearchUserRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::SearchUserResponse >, 11, false >
  client_search_user_rsp(kClientSearchUserRspFieldNumber, ::ProtoForTest::SearchUserResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::GetUserIDByKeywordRequest >, 11, false >
  bb_get_user_id_by_keyword_req(kBbGetUserIdByKeywordReqFieldNumber, ::ProtoForTest::GetUserIDByKeywordRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::GetUserIDByKeywordResponse >, 11, false >
  bb_get_user_id_by_keyword_rsp(kBbGetUserIdByKeywordRspFieldNumber, ::ProtoForTest::GetUserIDByKeywordResponse::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::GetUserProfileRequest >, 11, false >
  bb_get_user_profile_req(kBbGetUserProfileReqFieldNumber, ::ProtoForTest::GetUserProfileRequest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::GetUserProfileResponse >, 11, false >
  bb_get_user_profile_rsp(kBbGetUserProfileRspFieldNumber, ::ProtoForTest::GetUserProfileResponse::default_instance());

}  // namespace ProtoForTest
