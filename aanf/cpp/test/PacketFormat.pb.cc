// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PacketFormat.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace Protocol {

namespace {

const ::google::protobuf::Descriptor* PacketFormat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PacketFormat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PacketFormat_2eproto() {
  protobuf_AddDesc_PacketFormat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PacketFormat.proto");
  GOOGLE_CHECK(file != NULL);
  PacketFormat_descriptor_ = file->message_type(0);
  static const int PacketFormat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, service_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, version_),
  };
  PacketFormat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PacketFormat_descriptor_,
      PacketFormat::default_instance_,
      PacketFormat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PacketFormat, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PacketFormat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PacketFormat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PacketFormat_descriptor_, &PacketFormat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PacketFormat_2eproto() {
  delete PacketFormat::default_instance_;
  delete PacketFormat_reflection_;
}

void protobuf_AddDesc_PacketFormat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022PacketFormat.proto\022\010Protocol\"[\n\014Packet"
    "Format\022\016\n\006length\030\001 \002(\007\022\022\n\nservice_id\030\013 \002"
    "(\005\022\014\n\004type\030\014 \002(\005\022\017\n\007version\030\r \002(\005*\010\010d\020\200\200"
    "\200\200\002", 123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PacketFormat.proto", &protobuf_RegisterTypes);
  PacketFormat::default_instance_ = new PacketFormat();
  PacketFormat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PacketFormat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PacketFormat_2eproto {
  StaticDescriptorInitializer_PacketFormat_2eproto() {
    protobuf_AddDesc_PacketFormat_2eproto();
  }
} static_descriptor_initializer_PacketFormat_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PacketFormat::kLengthFieldNumber;
const int PacketFormat::kServiceIdFieldNumber;
const int PacketFormat::kTypeFieldNumber;
const int PacketFormat::kVersionFieldNumber;
#endif  // !_MSC_VER

PacketFormat::PacketFormat() {
  SharedCtor();
}

void PacketFormat::InitAsDefaultInstance() {
}

PacketFormat::PacketFormat(const PacketFormat& from) {
  SharedCtor();
  MergeFrom(from);
}

void PacketFormat::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0u;
  service_id_ = 0;
  type_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PacketFormat::~PacketFormat() {
  SharedDtor();
}

void PacketFormat::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PacketFormat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PacketFormat_descriptor_;
}

const PacketFormat& PacketFormat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PacketFormat_2eproto();  return *default_instance_;
}

PacketFormat* PacketFormat::default_instance_ = NULL;

PacketFormat* PacketFormat::New() const {
  return new PacketFormat;
}

void PacketFormat::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    length_ = 0u;
    service_id_ = 0;
    type_ = 0;
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PacketFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFixed32(
              input, &length_));
        _set_bit(0);
        if (input->ExpectTag(88)) goto parse_service_id;
        break;
      }
      
      // required int32 service_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_service_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &service_id_));
        _set_bit(1);
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }
      
      // required int32 type = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_));
        _set_bit(2);
        if (input->ExpectTag(104)) goto parse_version;
        break;
      }
      
      // required int32 version = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_version:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &version_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PacketFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PacketFormat::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required fixed32 length = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->length(), output);
  }
  
  // required int32 service_id = 11;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->service_id(), output);
  }
  
  // required int32 type = 12;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }
  
  // required int32 version = 13;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->version(), output);
  }
  
  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PacketFormat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required fixed32 length = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->length(), target);
  }
  
  // required int32 service_id = 11;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->service_id(), target);
  }
  
  // required int32 type = 12;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }
  
  // required int32 version = 13;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->version(), target);
  }
  
  // Extension range [100, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PacketFormat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 length = 1;
    if (has_length()) {
      total_size += 1 + 4;
    }
    
    // required int32 service_id = 11;
    if (has_service_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->service_id());
    }
    
    // required int32 type = 12;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 version = 13;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PacketFormat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PacketFormat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PacketFormat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PacketFormat::MergeFrom(const PacketFormat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_length(from.length());
    }
    if (from._has_bit(1)) {
      set_service_id(from.service_id());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
    if (from._has_bit(3)) {
      set_version(from.version());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PacketFormat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketFormat::CopyFrom(const PacketFormat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketFormat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PacketFormat::Swap(PacketFormat* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(service_id_, other->service_id_);
    std::swap(type_, other->type_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PacketFormat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PacketFormat_descriptor_;
  metadata.reflection = PacketFormat_reflection_;
  return metadata;
}


}  // namespace Protocol
