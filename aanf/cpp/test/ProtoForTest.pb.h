// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_ProtoForTest_2eproto__INCLUDED
#define PROTOBUF_ProtoForTest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "PacketFormat.pb.h"

namespace ProtoForTest {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ProtoForTest_2eproto();
void protobuf_AssignDesc_ProtoForTest_2eproto();
void protobuf_ShutdownFile_ProtoForTest_2eproto();

class UserProfile;
class CToBFReq;
class CToBFRsp;
class BFToBB1Req;
class BFToBB1Rsp;
class BFToBB2Req;
class BFToBB2Rsp;

enum CToBFRsp_ErrorCode {
  CToBFRsp_ErrorCode_OK = 0,
  CToBFRsp_ErrorCode_NO_SUCH_USER = 1,
  CToBFRsp_ErrorCode_ERROR = 2
};
bool CToBFRsp_ErrorCode_IsValid(int value);
const CToBFRsp_ErrorCode CToBFRsp_ErrorCode_ErrorCode_MIN = CToBFRsp_ErrorCode_OK;
const CToBFRsp_ErrorCode CToBFRsp_ErrorCode_ErrorCode_MAX = CToBFRsp_ErrorCode_ERROR;

const ::google::protobuf::EnumDescriptor* CToBFRsp_ErrorCode_descriptor();
inline const ::std::string& CToBFRsp_ErrorCode_Name(CToBFRsp_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CToBFRsp_ErrorCode_descriptor(), value);
}
inline bool CToBFRsp_ErrorCode_Parse(
    const ::std::string& name, CToBFRsp_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CToBFRsp_ErrorCode>(
    CToBFRsp_ErrorCode_descriptor(), name, value);
}
enum BFToBB1Rsp_ErrorCode {
  BFToBB1Rsp_ErrorCode_OK = 0,
  BFToBB1Rsp_ErrorCode_NO_SUCH_USER = 1,
  BFToBB1Rsp_ErrorCode_ERROR = 2
};
bool BFToBB1Rsp_ErrorCode_IsValid(int value);
const BFToBB1Rsp_ErrorCode BFToBB1Rsp_ErrorCode_ErrorCode_MIN = BFToBB1Rsp_ErrorCode_OK;
const BFToBB1Rsp_ErrorCode BFToBB1Rsp_ErrorCode_ErrorCode_MAX = BFToBB1Rsp_ErrorCode_ERROR;

const ::google::protobuf::EnumDescriptor* BFToBB1Rsp_ErrorCode_descriptor();
inline const ::std::string& BFToBB1Rsp_ErrorCode_Name(BFToBB1Rsp_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    BFToBB1Rsp_ErrorCode_descriptor(), value);
}
inline bool BFToBB1Rsp_ErrorCode_Parse(
    const ::std::string& name, BFToBB1Rsp_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BFToBB1Rsp_ErrorCode>(
    BFToBB1Rsp_ErrorCode_descriptor(), name, value);
}
enum BFToBB2Rsp_ErrorCode {
  BFToBB2Rsp_ErrorCode_OK = 0,
  BFToBB2Rsp_ErrorCode_NO_SUCH_USER = 1,
  BFToBB2Rsp_ErrorCode_ERROR = 2
};
bool BFToBB2Rsp_ErrorCode_IsValid(int value);
const BFToBB2Rsp_ErrorCode BFToBB2Rsp_ErrorCode_ErrorCode_MIN = BFToBB2Rsp_ErrorCode_OK;
const BFToBB2Rsp_ErrorCode BFToBB2Rsp_ErrorCode_ErrorCode_MAX = BFToBB2Rsp_ErrorCode_ERROR;

const ::google::protobuf::EnumDescriptor* BFToBB2Rsp_ErrorCode_descriptor();
inline const ::std::string& BFToBB2Rsp_ErrorCode_Name(BFToBB2Rsp_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    BFToBB2Rsp_ErrorCode_descriptor(), value);
}
inline bool BFToBB2Rsp_ErrorCode_Parse(
    const ::std::string& name, BFToBB2Rsp_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BFToBB2Rsp_ErrorCode>(
    BFToBB2Rsp_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class UserProfile : public ::google::protobuf::Message {
 public:
  UserProfile();
  virtual ~UserProfile();
  
  UserProfile(const UserProfile& from);
  
  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserProfile& default_instance();
  void Swap(UserProfile* other);
  
  // implements Message ----------------------------------------------
  
  UserProfile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserProfile& from);
  void MergeFrom(const UserProfile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 user_id() const;
  inline void set_user_id(::google::protobuf::int64 value);
  
  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  
  // required string user_desc = 3;
  inline bool has_user_desc() const;
  inline void clear_user_desc();
  static const int kUserDescFieldNumber = 3;
  inline const ::std::string& user_desc() const;
  inline void set_user_desc(const ::std::string& value);
  inline void set_user_desc(const char* value);
  inline void set_user_desc(const char* value, size_t size);
  inline ::std::string* mutable_user_desc();
  
  // required int32 gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::google::protobuf::int32 gender() const;
  inline void set_gender(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 user_id_;
  ::std::string* user_name_;
  static const ::std::string _default_user_name_;
  ::std::string* user_desc_;
  static const ::std::string _default_user_desc_;
  ::google::protobuf::int32 gender_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserProfile* default_instance_;
};
// -------------------------------------------------------------------

class CToBFReq : public ::google::protobuf::Message {
 public:
  CToBFReq();
  virtual ~CToBFReq();
  
  CToBFReq(const CToBFReq& from);
  
  inline CToBFReq& operator=(const CToBFReq& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CToBFReq& default_instance();
  void Swap(CToBFReq* other);
  
  // implements Message ----------------------------------------------
  
  CToBFReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CToBFReq& from);
  void MergeFrom(const CToBFReq& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string query_string = 4;
  inline bool has_query_string() const;
  inline void clear_query_string();
  static const int kQueryStringFieldNumber = 4;
  inline const ::std::string& query_string() const;
  inline void set_query_string(const ::std::string& value);
  inline void set_query_string(const char* value);
  inline void set_query_string(const char* value, size_t size);
  inline ::std::string* mutable_query_string();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* query_string_;
  static const ::std::string _default_query_string_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CToBFReq* default_instance_;
};
// -------------------------------------------------------------------

class CToBFRsp : public ::google::protobuf::Message {
 public:
  CToBFRsp();
  virtual ~CToBFRsp();
  
  CToBFRsp(const CToBFRsp& from);
  
  inline CToBFRsp& operator=(const CToBFRsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CToBFRsp& default_instance();
  void Swap(CToBFRsp* other);
  
  // implements Message ----------------------------------------------
  
  CToBFRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CToBFRsp& from);
  void MergeFrom(const CToBFRsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CToBFRsp_ErrorCode ErrorCode;
  static const ErrorCode OK = CToBFRsp_ErrorCode_OK;
  static const ErrorCode NO_SUCH_USER = CToBFRsp_ErrorCode_NO_SUCH_USER;
  static const ErrorCode ERROR = CToBFRsp_ErrorCode_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return CToBFRsp_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    CToBFRsp_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    CToBFRsp_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return CToBFRsp_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return CToBFRsp_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return CToBFRsp_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ProtoForTest.CToBFRsp.ErrorCode error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::ProtoForTest::CToBFRsp_ErrorCode error() const;
  inline void set_error(::ProtoForTest::CToBFRsp_ErrorCode value);
  
  // repeated .ProtoForTest.UserProfile user_profile = 5;
  inline int user_profile_size() const;
  inline void clear_user_profile();
  static const int kUserProfileFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >& user_profile() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >* mutable_user_profile();
  inline const ::ProtoForTest::UserProfile& user_profile(int index) const;
  inline ::ProtoForTest::UserProfile* mutable_user_profile(int index);
  inline ::ProtoForTest::UserProfile* add_user_profile();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_;
  ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile > user_profile_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CToBFRsp* default_instance_;
};
// -------------------------------------------------------------------

class BFToBB1Req : public ::google::protobuf::Message {
 public:
  BFToBB1Req();
  virtual ~BFToBB1Req();
  
  BFToBB1Req(const BFToBB1Req& from);
  
  inline BFToBB1Req& operator=(const BFToBB1Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFToBB1Req& default_instance();
  void Swap(BFToBB1Req* other);
  
  // implements Message ----------------------------------------------
  
  BFToBB1Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFToBB1Req& from);
  void MergeFrom(const BFToBB1Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string user_name_keyword = 4;
  inline int user_name_keyword_size() const;
  inline void clear_user_name_keyword();
  static const int kUserNameKeywordFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_name_keyword() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_name_keyword();
  inline const ::std::string& user_name_keyword(int index) const;
  inline ::std::string* mutable_user_name_keyword(int index);
  inline void set_user_name_keyword(int index, const ::std::string& value);
  inline void set_user_name_keyword(int index, const char* value);
  inline void set_user_name_keyword(int index, const char* value, size_t size);
  inline ::std::string* add_user_name_keyword();
  inline void add_user_name_keyword(const ::std::string& value);
  inline void add_user_name_keyword(const char* value);
  inline void add_user_name_keyword(const char* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> user_name_keyword_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BFToBB1Req* default_instance_;
};
// -------------------------------------------------------------------

class BFToBB1Rsp : public ::google::protobuf::Message {
 public:
  BFToBB1Rsp();
  virtual ~BFToBB1Rsp();
  
  BFToBB1Rsp(const BFToBB1Rsp& from);
  
  inline BFToBB1Rsp& operator=(const BFToBB1Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFToBB1Rsp& default_instance();
  void Swap(BFToBB1Rsp* other);
  
  // implements Message ----------------------------------------------
  
  BFToBB1Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFToBB1Rsp& from);
  void MergeFrom(const BFToBB1Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BFToBB1Rsp_ErrorCode ErrorCode;
  static const ErrorCode OK = BFToBB1Rsp_ErrorCode_OK;
  static const ErrorCode NO_SUCH_USER = BFToBB1Rsp_ErrorCode_NO_SUCH_USER;
  static const ErrorCode ERROR = BFToBB1Rsp_ErrorCode_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return BFToBB1Rsp_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    BFToBB1Rsp_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    BFToBB1Rsp_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return BFToBB1Rsp_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return BFToBB1Rsp_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return BFToBB1Rsp_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ProtoForTest.BFToBB1Rsp.ErrorCode error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::ProtoForTest::BFToBB1Rsp_ErrorCode error() const;
  inline void set_error(::ProtoForTest::BFToBB1Rsp_ErrorCode value);
  
  // repeated int64 user_id = 5;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 5;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& user_id() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_user_id();
  inline ::google::protobuf::int64 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::int64 value);
  inline void add_user_id(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > user_id_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BFToBB1Rsp* default_instance_;
};
// -------------------------------------------------------------------

class BFToBB2Req : public ::google::protobuf::Message {
 public:
  BFToBB2Req();
  virtual ~BFToBB2Req();
  
  BFToBB2Req(const BFToBB2Req& from);
  
  inline BFToBB2Req& operator=(const BFToBB2Req& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFToBB2Req& default_instance();
  void Swap(BFToBB2Req* other);
  
  // implements Message ----------------------------------------------
  
  BFToBB2Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFToBB2Req& from);
  void MergeFrom(const BFToBB2Req& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int64 user_id = 4;
  inline int user_id_size() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >& user_id() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >* mutable_user_id();
  inline ::google::protobuf::int64 user_id(int index) const;
  inline void set_user_id(int index, ::google::protobuf::int64 value);
  inline void add_user_id(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > user_id_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BFToBB2Req* default_instance_;
};
// -------------------------------------------------------------------

class BFToBB2Rsp : public ::google::protobuf::Message {
 public:
  BFToBB2Rsp();
  virtual ~BFToBB2Rsp();
  
  BFToBB2Rsp(const BFToBB2Rsp& from);
  
  inline BFToBB2Rsp& operator=(const BFToBB2Rsp& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BFToBB2Rsp& default_instance();
  void Swap(BFToBB2Rsp* other);
  
  // implements Message ----------------------------------------------
  
  BFToBB2Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BFToBB2Rsp& from);
  void MergeFrom(const BFToBB2Rsp& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BFToBB2Rsp_ErrorCode ErrorCode;
  static const ErrorCode OK = BFToBB2Rsp_ErrorCode_OK;
  static const ErrorCode NO_SUCH_USER = BFToBB2Rsp_ErrorCode_NO_SUCH_USER;
  static const ErrorCode ERROR = BFToBB2Rsp_ErrorCode_ERROR;
  static inline bool ErrorCode_IsValid(int value) {
    return BFToBB2Rsp_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    BFToBB2Rsp_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    BFToBB2Rsp_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return BFToBB2Rsp_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return BFToBB2Rsp_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return BFToBB2Rsp_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .ProtoForTest.BFToBB2Rsp.ErrorCode error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::ProtoForTest::BFToBB2Rsp_ErrorCode error() const;
  inline void set_error(::ProtoForTest::BFToBB2Rsp_ErrorCode value);
  
  // repeated .ProtoForTest.UserProfile user_profile = 5;
  inline int user_profile_size() const;
  inline void clear_user_profile();
  static const int kUserProfileFieldNumber = 5;
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >& user_profile() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >* mutable_user_profile();
  inline const ::ProtoForTest::UserProfile& user_profile(int index) const;
  inline ::ProtoForTest::UserProfile* mutable_user_profile(int index);
  inline ::ProtoForTest::UserProfile* add_user_profile();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_;
  ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile > user_profile_;
  friend void  protobuf_AddDesc_ProtoForTest_2eproto();
  friend void protobuf_AssignDesc_ProtoForTest_2eproto();
  friend void protobuf_ShutdownFile_ProtoForTest_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BFToBB2Rsp* default_instance_;
};
// ===================================================================


// ===================================================================

static const int kCToBfReqFieldNumber = 201;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::CToBFReq >, 11, false >
  c_to_bf_req;
static const int kCToBfRspFieldNumber = 202;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::CToBFRsp >, 11, false >
  c_to_bf_rsp;
static const int kBfToBb1ReqFieldNumber = 203;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::BFToBB1Req >, 11, false >
  bf_to_bb1_req;
static const int kBfToBb1RspFieldNumber = 204;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::BFToBB1Rsp >, 11, false >
  bf_to_bb1_rsp;
static const int kBfToBb2ReqFieldNumber = 205;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::BFToBB2Req >, 11, false >
  bf_to_bb2_req;
static const int kBfToBb2RspFieldNumber = 206;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Protocol::PacketFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::ProtoForTest::BFToBB2Rsp >, 11, false >
  bf_to_bb2_rsp;

// ===================================================================

// UserProfile

// required int64 user_id = 1;
inline bool UserProfile::has_user_id() const {
  return _has_bit(0);
}
inline void UserProfile::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 UserProfile::user_id() const {
  return user_id_;
}
inline void UserProfile::set_user_id(::google::protobuf::int64 value) {
  _set_bit(0);
  user_id_ = value;
}

// required string user_name = 2;
inline bool UserProfile::has_user_name() const {
  return _has_bit(1);
}
inline void UserProfile::clear_user_name() {
  if (user_name_ != &_default_user_name_) {
    user_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UserProfile::user_name() const {
  return *user_name_;
}
inline void UserProfile::set_user_name(const ::std::string& value) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserProfile::set_user_name(const char* value) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void UserProfile::set_user_name(const char* value, size_t size) {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserProfile::mutable_user_name() {
  _set_bit(1);
  if (user_name_ == &_default_user_name_) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}

// required string user_desc = 3;
inline bool UserProfile::has_user_desc() const {
  return _has_bit(2);
}
inline void UserProfile::clear_user_desc() {
  if (user_desc_ != &_default_user_desc_) {
    user_desc_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& UserProfile::user_desc() const {
  return *user_desc_;
}
inline void UserProfile::set_user_desc(const ::std::string& value) {
  _set_bit(2);
  if (user_desc_ == &_default_user_desc_) {
    user_desc_ = new ::std::string;
  }
  user_desc_->assign(value);
}
inline void UserProfile::set_user_desc(const char* value) {
  _set_bit(2);
  if (user_desc_ == &_default_user_desc_) {
    user_desc_ = new ::std::string;
  }
  user_desc_->assign(value);
}
inline void UserProfile::set_user_desc(const char* value, size_t size) {
  _set_bit(2);
  if (user_desc_ == &_default_user_desc_) {
    user_desc_ = new ::std::string;
  }
  user_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserProfile::mutable_user_desc() {
  _set_bit(2);
  if (user_desc_ == &_default_user_desc_) {
    user_desc_ = new ::std::string;
  }
  return user_desc_;
}

// required int32 gender = 4;
inline bool UserProfile::has_gender() const {
  return _has_bit(3);
}
inline void UserProfile::clear_gender() {
  gender_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 UserProfile::gender() const {
  return gender_;
}
inline void UserProfile::set_gender(::google::protobuf::int32 value) {
  _set_bit(3);
  gender_ = value;
}

// -------------------------------------------------------------------

// CToBFReq

// required string query_string = 4;
inline bool CToBFReq::has_query_string() const {
  return _has_bit(0);
}
inline void CToBFReq::clear_query_string() {
  if (query_string_ != &_default_query_string_) {
    query_string_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& CToBFReq::query_string() const {
  return *query_string_;
}
inline void CToBFReq::set_query_string(const ::std::string& value) {
  _set_bit(0);
  if (query_string_ == &_default_query_string_) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(value);
}
inline void CToBFReq::set_query_string(const char* value) {
  _set_bit(0);
  if (query_string_ == &_default_query_string_) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(value);
}
inline void CToBFReq::set_query_string(const char* value, size_t size) {
  _set_bit(0);
  if (query_string_ == &_default_query_string_) {
    query_string_ = new ::std::string;
  }
  query_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CToBFReq::mutable_query_string() {
  _set_bit(0);
  if (query_string_ == &_default_query_string_) {
    query_string_ = new ::std::string;
  }
  return query_string_;
}

// -------------------------------------------------------------------

// CToBFRsp

// required .ProtoForTest.CToBFRsp.ErrorCode error = 4;
inline bool CToBFRsp::has_error() const {
  return _has_bit(0);
}
inline void CToBFRsp::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::ProtoForTest::CToBFRsp_ErrorCode CToBFRsp::error() const {
  return static_cast< ::ProtoForTest::CToBFRsp_ErrorCode >(error_);
}
inline void CToBFRsp::set_error(::ProtoForTest::CToBFRsp_ErrorCode value) {
  GOOGLE_DCHECK(::ProtoForTest::CToBFRsp_ErrorCode_IsValid(value));
  _set_bit(0);
  error_ = value;
}

// repeated .ProtoForTest.UserProfile user_profile = 5;
inline int CToBFRsp::user_profile_size() const {
  return user_profile_.size();
}
inline void CToBFRsp::clear_user_profile() {
  user_profile_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >&
CToBFRsp::user_profile() const {
  return user_profile_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >*
CToBFRsp::mutable_user_profile() {
  return &user_profile_;
}
inline const ::ProtoForTest::UserProfile& CToBFRsp::user_profile(int index) const {
  return user_profile_.Get(index);
}
inline ::ProtoForTest::UserProfile* CToBFRsp::mutable_user_profile(int index) {
  return user_profile_.Mutable(index);
}
inline ::ProtoForTest::UserProfile* CToBFRsp::add_user_profile() {
  return user_profile_.Add();
}

// -------------------------------------------------------------------

// BFToBB1Req

// repeated string user_name_keyword = 4;
inline int BFToBB1Req::user_name_keyword_size() const {
  return user_name_keyword_.size();
}
inline void BFToBB1Req::clear_user_name_keyword() {
  user_name_keyword_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BFToBB1Req::user_name_keyword() const {
  return user_name_keyword_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BFToBB1Req::mutable_user_name_keyword() {
  return &user_name_keyword_;
}
inline const ::std::string& BFToBB1Req::user_name_keyword(int index) const {
  return user_name_keyword_.Get(index);
}
inline ::std::string* BFToBB1Req::mutable_user_name_keyword(int index) {
  return user_name_keyword_.Mutable(index);
}
inline void BFToBB1Req::set_user_name_keyword(int index, const ::std::string& value) {
  user_name_keyword_.Mutable(index)->assign(value);
}
inline void BFToBB1Req::set_user_name_keyword(int index, const char* value) {
  user_name_keyword_.Mutable(index)->assign(value);
}
inline void BFToBB1Req::set_user_name_keyword(int index, const char* value, size_t size) {
  user_name_keyword_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BFToBB1Req::add_user_name_keyword() {
  return user_name_keyword_.Add();
}
inline void BFToBB1Req::add_user_name_keyword(const ::std::string& value) {
  user_name_keyword_.Add()->assign(value);
}
inline void BFToBB1Req::add_user_name_keyword(const char* value) {
  user_name_keyword_.Add()->assign(value);
}
inline void BFToBB1Req::add_user_name_keyword(const char* value, size_t size) {
  user_name_keyword_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// -------------------------------------------------------------------

// BFToBB1Rsp

// required .ProtoForTest.BFToBB1Rsp.ErrorCode error = 4;
inline bool BFToBB1Rsp::has_error() const {
  return _has_bit(0);
}
inline void BFToBB1Rsp::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::ProtoForTest::BFToBB1Rsp_ErrorCode BFToBB1Rsp::error() const {
  return static_cast< ::ProtoForTest::BFToBB1Rsp_ErrorCode >(error_);
}
inline void BFToBB1Rsp::set_error(::ProtoForTest::BFToBB1Rsp_ErrorCode value) {
  GOOGLE_DCHECK(::ProtoForTest::BFToBB1Rsp_ErrorCode_IsValid(value));
  _set_bit(0);
  error_ = value;
}

// repeated int64 user_id = 5;
inline int BFToBB1Rsp::user_id_size() const {
  return user_id_.size();
}
inline void BFToBB1Rsp::clear_user_id() {
  user_id_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BFToBB1Rsp::user_id() const {
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BFToBB1Rsp::mutable_user_id() {
  return &user_id_;
}
inline ::google::protobuf::int64 BFToBB1Rsp::user_id(int index) const {
  return user_id_.Get(index);
}
inline void BFToBB1Rsp::set_user_id(int index, ::google::protobuf::int64 value) {
  user_id_.Set(index, value);
}
inline void BFToBB1Rsp::add_user_id(::google::protobuf::int64 value) {
  user_id_.Add(value);
}

// -------------------------------------------------------------------

// BFToBB2Req

// repeated int64 user_id = 4;
inline int BFToBB2Req::user_id_size() const {
  return user_id_.size();
}
inline void BFToBB2Req::clear_user_id() {
  user_id_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BFToBB2Req::user_id() const {
  return user_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BFToBB2Req::mutable_user_id() {
  return &user_id_;
}
inline ::google::protobuf::int64 BFToBB2Req::user_id(int index) const {
  return user_id_.Get(index);
}
inline void BFToBB2Req::set_user_id(int index, ::google::protobuf::int64 value) {
  user_id_.Set(index, value);
}
inline void BFToBB2Req::add_user_id(::google::protobuf::int64 value) {
  user_id_.Add(value);
}

// -------------------------------------------------------------------

// BFToBB2Rsp

// required .ProtoForTest.BFToBB2Rsp.ErrorCode error = 4;
inline bool BFToBB2Rsp::has_error() const {
  return _has_bit(0);
}
inline void BFToBB2Rsp::clear_error() {
  error_ = 0;
  _clear_bit(0);
}
inline ::ProtoForTest::BFToBB2Rsp_ErrorCode BFToBB2Rsp::error() const {
  return static_cast< ::ProtoForTest::BFToBB2Rsp_ErrorCode >(error_);
}
inline void BFToBB2Rsp::set_error(::ProtoForTest::BFToBB2Rsp_ErrorCode value) {
  GOOGLE_DCHECK(::ProtoForTest::BFToBB2Rsp_ErrorCode_IsValid(value));
  _set_bit(0);
  error_ = value;
}

// repeated .ProtoForTest.UserProfile user_profile = 5;
inline int BFToBB2Rsp::user_profile_size() const {
  return user_profile_.size();
}
inline void BFToBB2Rsp::clear_user_profile() {
  user_profile_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >&
BFToBB2Rsp::user_profile() const {
  return user_profile_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoForTest::UserProfile >*
BFToBB2Rsp::mutable_user_profile() {
  return &user_profile_;
}
inline const ::ProtoForTest::UserProfile& BFToBB2Rsp::user_profile(int index) const {
  return user_profile_.Get(index);
}
inline ::ProtoForTest::UserProfile* BFToBB2Rsp::mutable_user_profile(int index) {
  return user_profile_.Mutable(index);
}
inline ::ProtoForTest::UserProfile* BFToBB2Rsp::add_user_profile() {
  return user_profile_.Add();
}


}  // namespace ProtoForTest

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoForTest::CToBFRsp_ErrorCode>() {
  return ::ProtoForTest::CToBFRsp_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoForTest::BFToBB1Rsp_ErrorCode>() {
  return ::ProtoForTest::BFToBB1Rsp_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProtoForTest::BFToBB2Rsp_ErrorCode>() {
  return ::ProtoForTest::BFToBB2Rsp_ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_ProtoForTest_2eproto__INCLUDED
