// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageForTest.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MessageForTest {

namespace {

const ::google::protobuf::Descriptor* UserProfile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserProfile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CToBFReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CToBFReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CToBFRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CToBFRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CToBFRsp_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BFToBB1Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFToBB1Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFToBB1Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFToBB1Rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BFToBB1Rsp_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BFToBB2Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFToBB2Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* BFToBB2Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BFToBB2Rsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BFToBB2Rsp_ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageForTest_2eproto() {
  protobuf_AddDesc_MessageForTest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageForTest.proto");
  GOOGLE_CHECK(file != NULL);
  UserProfile_descriptor_ = file->message_type(0);
  static const int UserProfile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, user_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, gender_),
  };
  UserProfile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserProfile_descriptor_,
      UserProfile::default_instance_,
      UserProfile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserProfile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserProfile));
  CToBFReq_descriptor_ = file->message_type(1);
  static const int CToBFReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFReq, query_string_),
  };
  CToBFReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CToBFReq_descriptor_,
      CToBFReq::default_instance_,
      CToBFReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CToBFReq));
  CToBFRsp_descriptor_ = file->message_type(2);
  static const int CToBFRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFRsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFRsp, user_profile_),
  };
  CToBFRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CToBFRsp_descriptor_,
      CToBFRsp::default_instance_,
      CToBFRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CToBFRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CToBFRsp));
  CToBFRsp_ErrorCode_descriptor_ = CToBFRsp_descriptor_->enum_type(0);
  BFToBB1Req_descriptor_ = file->message_type(3);
  static const int BFToBB1Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Req, user_name_keyword_),
  };
  BFToBB1Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFToBB1Req_descriptor_,
      BFToBB1Req::default_instance_,
      BFToBB1Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFToBB1Req));
  BFToBB1Rsp_descriptor_ = file->message_type(4);
  static const int BFToBB1Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Rsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Rsp, user_id_),
  };
  BFToBB1Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFToBB1Rsp_descriptor_,
      BFToBB1Rsp::default_instance_,
      BFToBB1Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB1Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFToBB1Rsp));
  BFToBB1Rsp_ErrorCode_descriptor_ = BFToBB1Rsp_descriptor_->enum_type(0);
  BFToBB2Req_descriptor_ = file->message_type(5);
  static const int BFToBB2Req_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Req, user_id_),
  };
  BFToBB2Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFToBB2Req_descriptor_,
      BFToBB2Req::default_instance_,
      BFToBB2Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFToBB2Req));
  BFToBB2Rsp_descriptor_ = file->message_type(6);
  static const int BFToBB2Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Rsp, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Rsp, user_profile_),
  };
  BFToBB2Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BFToBB2Rsp_descriptor_,
      BFToBB2Rsp::default_instance_,
      BFToBB2Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BFToBB2Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BFToBB2Rsp));
  BFToBB2Rsp_ErrorCode_descriptor_ = BFToBB2Rsp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageForTest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserProfile_descriptor_, &UserProfile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CToBFReq_descriptor_, &CToBFReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CToBFRsp_descriptor_, &CToBFRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFToBB1Req_descriptor_, &BFToBB1Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFToBB1Rsp_descriptor_, &BFToBB1Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFToBB2Req_descriptor_, &BFToBB2Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BFToBB2Rsp_descriptor_, &BFToBB2Rsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageForTest_2eproto() {
  delete UserProfile::default_instance_;
  delete UserProfile_reflection_;
  delete CToBFReq::default_instance_;
  delete CToBFReq_reflection_;
  delete CToBFRsp::default_instance_;
  delete CToBFRsp_reflection_;
  delete BFToBB1Req::default_instance_;
  delete BFToBB1Req_reflection_;
  delete BFToBB1Rsp::default_instance_;
  delete BFToBB1Rsp_reflection_;
  delete BFToBB2Req::default_instance_;
  delete BFToBB2Req_reflection_;
  delete BFToBB2Rsp::default_instance_;
  delete BFToBB2Rsp_reflection_;
}

void protobuf_AddDesc_MessageForTest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AANF_Message::protobuf_AddDesc_MessageFormat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024MessageForTest.proto\022\016MessageForTest\032\023"
    "MessageFormat.proto\"T\n\013UserProfile\022\017\n\007us"
    "er_id\030\001 \002(\003\022\021\n\tuser_name\030\002 \002(\t\022\021\n\tuser_d"
    "esc\030\003 \002(\t\022\016\n\006gender\030\004 \002(\005\" \n\010CToBFReq\022\024\n"
    "\014query_string\030\004 \002(\t\"\242\001\n\010CToBFRsp\0221\n\005erro"
    "r\030\004 \002(\0162\".MessageForTest.CToBFRsp.ErrorC"
    "ode\0221\n\014user_profile\030\005 \003(\0132\033.MessageForTe"
    "st.UserProfile\"0\n\tErrorCode\022\006\n\002OK\020\000\022\020\n\014N"
    "O_SUCH_USER\020\001\022\t\n\005ERROR\020\002\"\'\n\nBFToBB1Req\022\031"
    "\n\021user_name_keyword\030\004 \003(\t\"\204\001\n\nBFToBB1Rsp"
    "\0223\n\005error\030\004 \002(\0162$.MessageForTest.BFToBB1"
    "Rsp.ErrorCode\022\017\n\007user_id\030\005 \003(\003\"0\n\tErrorC"
    "ode\022\006\n\002OK\020\000\022\020\n\014NO_SUCH_USER\020\001\022\t\n\005ERROR\020\002"
    "\"\035\n\nBFToBB2Req\022\017\n\007user_id\030\004 \003(\003\"\246\001\n\nBFTo"
    "BB2Rsp\0223\n\005error\030\004 \002(\0162$.MessageForTest.B"
    "FToBB2Rsp.ErrorCode\0221\n\014user_profile\030\005 \003("
    "\0132\033.MessageForTest.UserProfile\"0\n\tErrorC"
    "ode\022\006\n\002OK\020\000\022\020\n\014NO_SUCH_USER\020\001\022\t\n\005ERROR\020\002"
    ":K\n\013c_to_bf_req\022\033.AANF_Message.MessageFo"
    "rmat\030\311\001 \001(\0132\030.MessageForTest.CToBFReq:K\n"
    "\013c_to_bf_rsp\022\033.AANF_Message.MessageForma"
    "t\030\312\001 \001(\0132\030.MessageForTest.CToBFRsp:O\n\rbf"
    "_to_bb1_req\022\033.AANF_Message.MessageFormat"
    "\030\313\001 \001(\0132\032.MessageForTest.BFToBB1Req:O\n\rb"
    "f_to_bb1_rsp\022\033.AANF_Message.MessageForma"
    "t\030\314\001 \001(\0132\032.MessageForTest.BFToBB1Rsp:O\n\r"
    "bf_to_bb2_req\022\033.AANF_Message.MessageForm"
    "at\030\315\001 \001(\0132\032.MessageForTest.BFToBB2Req:O\n"
    "\rbf_to_bb2_rsp\022\033.AANF_Message.MessageFor"
    "mat\030\316\001 \001(\0132\032.MessageForTest.BFToBB2Rsp", 1198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageForTest.proto", &protobuf_RegisterTypes);
  UserProfile::default_instance_ = new UserProfile();
  CToBFReq::default_instance_ = new CToBFReq();
  CToBFRsp::default_instance_ = new CToBFRsp();
  BFToBB1Req::default_instance_ = new BFToBB1Req();
  BFToBB1Rsp::default_instance_ = new BFToBB1Rsp();
  BFToBB2Req::default_instance_ = new BFToBB2Req();
  BFToBB2Rsp::default_instance_ = new BFToBB2Rsp();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::AANF_Message::MessageFormat::default_instance(),
    201, 11, false, false,
    &::MessageForTest::CToBFReq::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::AANF_Message::MessageFormat::default_instance(),
    202, 11, false, false,
    &::MessageForTest::CToBFRsp::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::AANF_Message::MessageFormat::default_instance(),
    203, 11, false, false,
    &::MessageForTest::BFToBB1Req::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::AANF_Message::MessageFormat::default_instance(),
    204, 11, false, false,
    &::MessageForTest::BFToBB1Rsp::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::AANF_Message::MessageFormat::default_instance(),
    205, 11, false, false,
    &::MessageForTest::BFToBB2Req::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::AANF_Message::MessageFormat::default_instance(),
    206, 11, false, false,
    &::MessageForTest::BFToBB2Rsp::default_instance());
  UserProfile::default_instance_->InitAsDefaultInstance();
  CToBFReq::default_instance_->InitAsDefaultInstance();
  CToBFRsp::default_instance_->InitAsDefaultInstance();
  BFToBB1Req::default_instance_->InitAsDefaultInstance();
  BFToBB1Rsp::default_instance_->InitAsDefaultInstance();
  BFToBB2Req::default_instance_->InitAsDefaultInstance();
  BFToBB2Rsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageForTest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageForTest_2eproto {
  StaticDescriptorInitializer_MessageForTest_2eproto() {
    protobuf_AddDesc_MessageForTest_2eproto();
  }
} static_descriptor_initializer_MessageForTest_2eproto_;


// ===================================================================

const ::std::string UserProfile::_default_user_name_;
const ::std::string UserProfile::_default_user_desc_;
#ifndef _MSC_VER
const int UserProfile::kUserIdFieldNumber;
const int UserProfile::kUserNameFieldNumber;
const int UserProfile::kUserDescFieldNumber;
const int UserProfile::kGenderFieldNumber;
#endif  // !_MSC_VER

UserProfile::UserProfile() {
  SharedCtor();
}

void UserProfile::InitAsDefaultInstance() {
}

UserProfile::UserProfile(const UserProfile& from) {
  SharedCtor();
  MergeFrom(from);
}

void UserProfile::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  user_name_ = const_cast< ::std::string*>(&_default_user_name_);
  user_desc_ = const_cast< ::std::string*>(&_default_user_desc_);
  gender_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserProfile::~UserProfile() {
  SharedDtor();
}

void UserProfile::SharedDtor() {
  if (user_name_ != &_default_user_name_) {
    delete user_name_;
  }
  if (user_desc_ != &_default_user_desc_) {
    delete user_desc_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UserProfile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserProfile_descriptor_;
}

const UserProfile& UserProfile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

UserProfile* UserProfile::default_instance_ = NULL;

UserProfile* UserProfile::New() const {
  return new UserProfile;
}

void UserProfile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (user_name_ != &_default_user_name_) {
        user_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (user_desc_ != &_default_user_desc_) {
        user_desc_->clear();
      }
    }
    gender_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &user_id_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // required string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_user_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user_name().data(), this->user_name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_user_desc;
        break;
      }
      
      // required string user_desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_desc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_user_desc()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user_desc().data(), this->user_desc().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_gender;
        break;
      }
      
      // required int32 gender = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_gender:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &gender_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UserProfile::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 user_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // required string user_desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_desc().data(), this->user_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_desc(), output);
  }
  
  // required int32 gender = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gender(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserProfile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }
  
  // required string user_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // required string user_desc = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_desc().data(), this->user_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_desc(), target);
  }
  
  // required int32 gender = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gender(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserProfile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }
    
    // required string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // required string user_desc = 3;
    if (has_user_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_desc());
    }
    
    // required int32 gender = 4;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UserProfile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserProfile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserProfile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserProfile::MergeFrom(const UserProfile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user_id(from.user_id());
    }
    if (from._has_bit(1)) {
      set_user_name(from.user_name());
    }
    if (from._has_bit(2)) {
      set_user_desc(from.user_desc());
    }
    if (from._has_bit(3)) {
      set_gender(from.gender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserProfile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserProfile::CopyFrom(const UserProfile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserProfile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void UserProfile::Swap(UserProfile* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(user_desc_, other->user_desc_);
    std::swap(gender_, other->gender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserProfile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserProfile_descriptor_;
  metadata.reflection = UserProfile_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CToBFReq::_default_query_string_;
#ifndef _MSC_VER
const int CToBFReq::kQueryStringFieldNumber;
#endif  // !_MSC_VER

CToBFReq::CToBFReq() {
  SharedCtor();
}

void CToBFReq::InitAsDefaultInstance() {
}

CToBFReq::CToBFReq(const CToBFReq& from) {
  SharedCtor();
  MergeFrom(from);
}

void CToBFReq::SharedCtor() {
  _cached_size_ = 0;
  query_string_ = const_cast< ::std::string*>(&_default_query_string_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CToBFReq::~CToBFReq() {
  SharedDtor();
}

void CToBFReq::SharedDtor() {
  if (query_string_ != &_default_query_string_) {
    delete query_string_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CToBFReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CToBFReq_descriptor_;
}

const CToBFReq& CToBFReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

CToBFReq* CToBFReq::default_instance_ = NULL;

CToBFReq* CToBFReq::New() const {
  return new CToBFReq;
}

void CToBFReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (query_string_ != &_default_query_string_) {
        query_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CToBFReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_query_string()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->query_string().data(), this->query_string().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CToBFReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CToBFReq::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string query_string = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->query_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CToBFReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query_string = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query_string().data(), this->query_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->query_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CToBFReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query_string = 4;
    if (has_query_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CToBFReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CToBFReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CToBFReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CToBFReq::MergeFrom(const CToBFReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_query_string(from.query_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CToBFReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CToBFReq::CopyFrom(const CToBFReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CToBFReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CToBFReq::Swap(CToBFReq* other) {
  if (other != this) {
    std::swap(query_string_, other->query_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CToBFReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CToBFReq_descriptor_;
  metadata.reflection = CToBFReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CToBFRsp_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CToBFRsp_ErrorCode_descriptor_;
}
bool CToBFRsp_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CToBFRsp_ErrorCode CToBFRsp::OK;
const CToBFRsp_ErrorCode CToBFRsp::NO_SUCH_USER;
const CToBFRsp_ErrorCode CToBFRsp::ERROR;
const CToBFRsp_ErrorCode CToBFRsp::ErrorCode_MIN;
const CToBFRsp_ErrorCode CToBFRsp::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CToBFRsp::kErrorFieldNumber;
const int CToBFRsp::kUserProfileFieldNumber;
#endif  // !_MSC_VER

CToBFRsp::CToBFRsp() {
  SharedCtor();
}

void CToBFRsp::InitAsDefaultInstance() {
}

CToBFRsp::CToBFRsp(const CToBFRsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void CToBFRsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CToBFRsp::~CToBFRsp() {
  SharedDtor();
}

void CToBFRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CToBFRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CToBFRsp_descriptor_;
}

const CToBFRsp& CToBFRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

CToBFRsp* CToBFRsp::default_instance_ = NULL;

CToBFRsp* CToBFRsp::New() const {
  return new CToBFRsp;
}

void CToBFRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  user_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CToBFRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageForTest.CToBFRsp.ErrorCode error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MessageForTest::CToBFRsp_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::MessageForTest::CToBFRsp_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(42)) goto parse_user_profile;
        break;
      }
      
      // repeated .MessageForTest.UserProfile user_profile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_profile:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_user_profile()));
        if (input->ExpectTag(42)) goto parse_user_profile;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CToBFRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CToBFRsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MessageForTest.CToBFRsp.ErrorCode error = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }
  
  // repeated .MessageForTest.UserProfile user_profile = 5;
  for (int i = 0; i < this->user_profile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->user_profile(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CToBFRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MessageForTest.CToBFRsp.ErrorCode error = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }
  
  // repeated .MessageForTest.UserProfile user_profile = 5;
  for (int i = 0; i < this->user_profile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_profile(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CToBFRsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageForTest.CToBFRsp.ErrorCode error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  // repeated .MessageForTest.UserProfile user_profile = 5;
  total_size += 1 * this->user_profile_size();
  for (int i = 0; i < this->user_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_profile(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CToBFRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CToBFRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CToBFRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CToBFRsp::MergeFrom(const CToBFRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_profile_.MergeFrom(from.user_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CToBFRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CToBFRsp::CopyFrom(const CToBFRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CToBFRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < user_profile_size(); i++) {
    if (!this->user_profile(i).IsInitialized()) return false;
  }
  return true;
}

void CToBFRsp::Swap(CToBFRsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    user_profile_.Swap(&other->user_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CToBFRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CToBFRsp_descriptor_;
  metadata.reflection = CToBFRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFToBB1Req::kUserNameKeywordFieldNumber;
#endif  // !_MSC_VER

BFToBB1Req::BFToBB1Req() {
  SharedCtor();
}

void BFToBB1Req::InitAsDefaultInstance() {
}

BFToBB1Req::BFToBB1Req(const BFToBB1Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void BFToBB1Req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFToBB1Req::~BFToBB1Req() {
  SharedDtor();
}

void BFToBB1Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BFToBB1Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFToBB1Req_descriptor_;
}

const BFToBB1Req& BFToBB1Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

BFToBB1Req* BFToBB1Req::default_instance_ = NULL;

BFToBB1Req* BFToBB1Req::New() const {
  return new BFToBB1Req;
}

void BFToBB1Req::Clear() {
  user_name_keyword_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFToBB1Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_name_keyword = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_name_keyword:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_user_name_keyword()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->user_name_keyword(0).data(), this->user_name_keyword(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_user_name_keyword;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFToBB1Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BFToBB1Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string user_name_keyword = 4;
  for (int i = 0; i < this->user_name_keyword_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_name_keyword(i).data(), this->user_name_keyword(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_name_keyword(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFToBB1Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string user_name_keyword = 4;
  for (int i = 0; i < this->user_name_keyword_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name_keyword(i).data(), this->user_name_keyword(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->user_name_keyword(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFToBB1Req::ByteSize() const {
  int total_size = 0;
  
  // repeated string user_name_keyword = 4;
  total_size += 1 * this->user_name_keyword_size();
  for (int i = 0; i < this->user_name_keyword_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_name_keyword(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BFToBB1Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFToBB1Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFToBB1Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFToBB1Req::MergeFrom(const BFToBB1Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_name_keyword_.MergeFrom(from.user_name_keyword_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFToBB1Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFToBB1Req::CopyFrom(const BFToBB1Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFToBB1Req::IsInitialized() const {
  
  return true;
}

void BFToBB1Req::Swap(BFToBB1Req* other) {
  if (other != this) {
    user_name_keyword_.Swap(&other->user_name_keyword_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFToBB1Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFToBB1Req_descriptor_;
  metadata.reflection = BFToBB1Req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BFToBB1Rsp_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFToBB1Rsp_ErrorCode_descriptor_;
}
bool BFToBB1Rsp_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BFToBB1Rsp_ErrorCode BFToBB1Rsp::OK;
const BFToBB1Rsp_ErrorCode BFToBB1Rsp::NO_SUCH_USER;
const BFToBB1Rsp_ErrorCode BFToBB1Rsp::ERROR;
const BFToBB1Rsp_ErrorCode BFToBB1Rsp::ErrorCode_MIN;
const BFToBB1Rsp_ErrorCode BFToBB1Rsp::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BFToBB1Rsp::kErrorFieldNumber;
const int BFToBB1Rsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

BFToBB1Rsp::BFToBB1Rsp() {
  SharedCtor();
}

void BFToBB1Rsp::InitAsDefaultInstance() {
}

BFToBB1Rsp::BFToBB1Rsp(const BFToBB1Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void BFToBB1Rsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFToBB1Rsp::~BFToBB1Rsp() {
  SharedDtor();
}

void BFToBB1Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BFToBB1Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFToBB1Rsp_descriptor_;
}

const BFToBB1Rsp& BFToBB1Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

BFToBB1Rsp* BFToBB1Rsp::default_instance_ = NULL;

BFToBB1Rsp* BFToBB1Rsp::New() const {
  return new BFToBB1Rsp;
}

void BFToBB1Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFToBB1Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageForTest.BFToBB1Rsp.ErrorCode error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MessageForTest::BFToBB1Rsp_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::MessageForTest::BFToBB1Rsp_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }
      
      // repeated int64 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_user_id(value);
        if (input->ExpectTag(40)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFToBB1Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BFToBB1Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MessageForTest.BFToBB1Rsp.ErrorCode error = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }
  
  // repeated int64 user_id = 5;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->user_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFToBB1Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MessageForTest.BFToBB1Rsp.ErrorCode error = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }
  
  // repeated int64 user_id = 5;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->user_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFToBB1Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageForTest.BFToBB1Rsp.ErrorCode error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  // repeated int64 user_id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BFToBB1Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFToBB1Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFToBB1Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFToBB1Rsp::MergeFrom(const BFToBB1Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFToBB1Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFToBB1Rsp::CopyFrom(const BFToBB1Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFToBB1Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BFToBB1Rsp::Swap(BFToBB1Rsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFToBB1Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFToBB1Rsp_descriptor_;
  metadata.reflection = BFToBB1Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BFToBB2Req::kUserIdFieldNumber;
#endif  // !_MSC_VER

BFToBB2Req::BFToBB2Req() {
  SharedCtor();
}

void BFToBB2Req::InitAsDefaultInstance() {
}

BFToBB2Req::BFToBB2Req(const BFToBB2Req& from) {
  SharedCtor();
  MergeFrom(from);
}

void BFToBB2Req::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFToBB2Req::~BFToBB2Req() {
  SharedDtor();
}

void BFToBB2Req::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BFToBB2Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFToBB2Req_descriptor_;
}

const BFToBB2Req& BFToBB2Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

BFToBB2Req* BFToBB2Req::default_instance_ = NULL;

BFToBB2Req* BFToBB2Req::New() const {
  return new BFToBB2Req;
}

void BFToBB2Req::Clear() {
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFToBB2Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_user_id:
        ::google::protobuf::int64 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt64(
              input, &value));
        add_user_id(value);
        if (input->ExpectTag(32)) goto parse_user_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFToBB2Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BFToBB2Req::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int64 user_id = 4;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->user_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFToBB2Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 user_id = 4;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->user_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFToBB2Req::ByteSize() const {
  int total_size = 0;
  
  // repeated int64 user_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BFToBB2Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFToBB2Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFToBB2Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFToBB2Req::MergeFrom(const BFToBB2Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFToBB2Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFToBB2Req::CopyFrom(const BFToBB2Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFToBB2Req::IsInitialized() const {
  
  return true;
}

void BFToBB2Req::Swap(BFToBB2Req* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFToBB2Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFToBB2Req_descriptor_;
  metadata.reflection = BFToBB2Req_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BFToBB2Rsp_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFToBB2Rsp_ErrorCode_descriptor_;
}
bool BFToBB2Rsp_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BFToBB2Rsp_ErrorCode BFToBB2Rsp::OK;
const BFToBB2Rsp_ErrorCode BFToBB2Rsp::NO_SUCH_USER;
const BFToBB2Rsp_ErrorCode BFToBB2Rsp::ERROR;
const BFToBB2Rsp_ErrorCode BFToBB2Rsp::ErrorCode_MIN;
const BFToBB2Rsp_ErrorCode BFToBB2Rsp::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BFToBB2Rsp::kErrorFieldNumber;
const int BFToBB2Rsp::kUserProfileFieldNumber;
#endif  // !_MSC_VER

BFToBB2Rsp::BFToBB2Rsp() {
  SharedCtor();
}

void BFToBB2Rsp::InitAsDefaultInstance() {
}

BFToBB2Rsp::BFToBB2Rsp(const BFToBB2Rsp& from) {
  SharedCtor();
  MergeFrom(from);
}

void BFToBB2Rsp::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BFToBB2Rsp::~BFToBB2Rsp() {
  SharedDtor();
}

void BFToBB2Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BFToBB2Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BFToBB2Rsp_descriptor_;
}

const BFToBB2Rsp& BFToBB2Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageForTest_2eproto();  return *default_instance_;
}

BFToBB2Rsp* BFToBB2Rsp::default_instance_ = NULL;

BFToBB2Rsp* BFToBB2Rsp::New() const {
  return new BFToBB2Rsp;
}

void BFToBB2Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  user_profile_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BFToBB2Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MessageForTest.BFToBB2Rsp.ErrorCode error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MessageForTest::BFToBB2Rsp_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::MessageForTest::BFToBB2Rsp_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(42)) goto parse_user_profile;
        break;
      }
      
      // repeated .MessageForTest.UserProfile user_profile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_user_profile:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_user_profile()));
        if (input->ExpectTag(42)) goto parse_user_profile;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BFToBB2Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BFToBB2Rsp::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MessageForTest.BFToBB2Rsp.ErrorCode error = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error(), output);
  }
  
  // repeated .MessageForTest.UserProfile user_profile = 5;
  for (int i = 0; i < this->user_profile_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->user_profile(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BFToBB2Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MessageForTest.BFToBB2Rsp.ErrorCode error = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error(), target);
  }
  
  // repeated .MessageForTest.UserProfile user_profile = 5;
  for (int i = 0; i < this->user_profile_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user_profile(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BFToBB2Rsp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MessageForTest.BFToBB2Rsp.ErrorCode error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  // repeated .MessageForTest.UserProfile user_profile = 5;
  total_size += 1 * this->user_profile_size();
  for (int i = 0; i < this->user_profile_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_profile(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BFToBB2Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BFToBB2Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BFToBB2Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BFToBB2Rsp::MergeFrom(const BFToBB2Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_profile_.MergeFrom(from.user_profile_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BFToBB2Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BFToBB2Rsp::CopyFrom(const BFToBB2Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BFToBB2Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < user_profile_size(); i++) {
    if (!this->user_profile(i).IsInitialized()) return false;
  }
  return true;
}

void BFToBB2Rsp::Swap(BFToBB2Rsp* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    user_profile_.Swap(&other->user_profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BFToBB2Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BFToBB2Rsp_descriptor_;
  metadata.reflection = BFToBB2Rsp_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::MessageForTest::CToBFReq >, 11, false >
  c_to_bf_req(kCToBfReqFieldNumber, ::MessageForTest::CToBFReq::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::MessageForTest::CToBFRsp >, 11, false >
  c_to_bf_rsp(kCToBfRspFieldNumber, ::MessageForTest::CToBFRsp::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::MessageForTest::BFToBB1Req >, 11, false >
  bf_to_bb1_req(kBfToBb1ReqFieldNumber, ::MessageForTest::BFToBB1Req::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::MessageForTest::BFToBB1Rsp >, 11, false >
  bf_to_bb1_rsp(kBfToBb1RspFieldNumber, ::MessageForTest::BFToBB1Rsp::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::MessageForTest::BFToBB2Req >, 11, false >
  bf_to_bb2_req(kBfToBb2ReqFieldNumber, ::MessageForTest::BFToBB2Req::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::AANF_Message::MessageFormat,
    ::google::protobuf::internal::MessageTypeTraits< ::MessageForTest::BFToBB2Rsp >, 11, false >
  bf_to_bb2_rsp(kBfToBb2RspFieldNumber, ::MessageForTest::BFToBB2Rsp::default_instance());

}  // namespace MessageForTest
